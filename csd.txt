#include<stdio.h>
#include<conio.h>

#define max 5

int arr[max];
int data=-1;


void add()
{
	int x;

	if (data == max - 1)
	{
		printf("\nArray is full..");
	}
	else
	{
		printf("\nEnter element on Array: ");
		scanf("%d", &x);
		data = data + 1;
		arr[data] = x;
	}
	printf("\n");
}
void del()
{
	if(data==-1)
	{
		printf("\nList is Empty..");
	}
	else
	{
		printf("%d is deleted",arr[data]);
		data=data-1;
	}
	printf("\n");
}
void modify()
{
	int no,i,d;
	if(data==-1)
	{
		printf("\nList is Empty");
	}
	else
	{
		printf("Enter data to search: ");
		scanf("%d",&no);

		for(i=data; i>=-1 && arr[i]!=no; i--)
		{
		      ;
		}
		if(i!=-1)
		{


			if(arr[i]==no)
			{
				printf("Enter new data: ");
				scanf("%d",&d);
				arr[i]=d;
				printf("Data updated..");
				return;
			}
			printf("Data is Not Found");
			return;
		}

		printf("Data is Not Found");


	}
}
void sort()
{
	int i,j,temp;
	if(data==-1)
	{
		printf("\nList is Empty");
	}
	else
	{
		for(i=0;i<=data;i++)
		{
			for(j=i+1;j<=data;j++)
			{
				if(arr[i] > arr[j])
				{
				    temp=arr[i];
				    arr[i]=arr[j];
				    arr[j]=temp;
				}

			}
		}
		printf("\nSorted List");
		printf("\n");
		for(i=data;i>=0;i--)
		{
			printf("%d->",arr[i]);
		}
	}
}
void display()
{
	int i;
	if(data==-1)
	{
		printf("\nList is Empty");
	}
	else
	{
		for(i=data;i>=0;i--)
		{
			printf("%d->",arr[i]);
		}
	}
}
void search()
{
	int no,i;
	if(data==-1)
	{
		printf("\nList is Empty");
	}
	else
	{
		printf("Enter data to search: ");
		scanf("%d",&no);

		for(i=data; i>=-1 && arr[i]!=no; i--)
		{
		      ;
		}
		if(i!=-1)
		{
			if(arr[i]==no)
			{
				printf("%d is Found at index[%d]",no,i);
				return;
			}
			printf("Data is Not Found");
			return;
		}

		printf("Data is Not Found");


	}
}
void b_search()
{
	int first, last, middle, search;
	if(data==-1)
	{

		printf("List is empty");
	}
	else
	{
		printf("Enter data you want to search: ");
		scanf("%d", &search);

		first = 0;
		last = 4;
		middle = (first+last)/2;

		while (first <= last) {
			if (arr[middle] < search)
			first = middle + 1;
			else if (arr[middle] == search) {
			printf("%d found at index [%d].\n", search, middle+1);
			break;
			}
			else
			last = middle - 1;

			middle = (first + last)/2;
		}
		if (first > last)
			printf("Not found!", search);
	}
}
void main()
{

    int choice;

    do
    {
	  clrscr();
	printf("\n1.ADD \n2.Delete \n3.Display  \n4.Sort \n5.Modify \n6.Search \n7.Binary search \n0.End");
	
	printf("\n\nEnter your choice: ");
	scanf("%d", &choice);

	switch (choice)
	{
		case 1:
		    add();
		    getch();
		    break;

		case 2:
		    del();
		    getch();
		    break;

		case 3:
		    display();
		    getch();
		    break;

		case 4:
		    sort();
		    getch();
		    break;

		case 5:
		    modify();
		    getch();
		    break;

		case 6:search();
			getch();
			break;
		case 7:b_search();
			getch();
			break;

		case 0:
		    exit(0);
		    break;

		default:
		  printf("\nPlease Enter valid choice..");
		  getch();
	}
    } while(1);

}


q2

#include<stdio.h>
#include<conio.h>

#define SIZE 10

int top = -1, stack[SIZE];
void push();
void pop();
void peep();
void update();
void show();

void main()
{
    int choice;

    do
    {
	clrscr();
	
	printf("\n1.Push \n2.Pop \n3.Show  \n4.peep \n5.Update \n0.End");
	
	printf("\n\nEnter your choice: ");
	scanf("%d", &choice);

	switch (choice)
	{
		case 1:
		    push();
		    getch();
		    break;

		case 2:
		    pop();
		    getch();
		    break;

		case 3:
		    show();
		    getch();
		    break;

		case 4:
		    peep();
		    getch();
		    break;

		case 5:
		    update();
		    getch();
		    break;

		case 0:
		    exit(0);
		    break;

	default:
	    printf("\nplease Enter valid choice..");
	}
    } while(1);


}

void push()
{
    int x;

    if (top == SIZE - 1)
    {
	printf("\nStack is full..");
    }
    else
    {
	printf("\nEnter element on Stack: ");
	scanf("%d", &x);
	top = top + 1;
	stack[top] = x;
    }
    printf("\n");
}

void pop()
{
    if (top == -1)
    {
	printf("\nStack is Empty");
    }
    else
    {
	printf("\n%d is Deleted..", stack[top]);
	top = top - 1;
    }
    printf("\n");
}

void show()
{
int i;
    if (top == -1)
    {
	printf("\nStack is Empty");
    }
    else
    {
	
	for (i = top; i >= 0; i--)
	    printf("%d->", stack[i]);
    }
    printf("\n");
}
void peep()
{
	int no,i;
	if(top==-1)
	{
		printf("Stack is Empty..");
	}
	else
	{
		printf("Enter data you want to search: ");
		scanf("%d",&no);

		for(i=top; i>=-1 && stack[i]!=no; i--)
		{
		      ;
		}
		if(i!=-1)
		{
			if(stack[i]==no)
			{
				printf("%d is Found ",no);
				return;
			}
			printf("%d is Not Found...",no);
			return;
		}

		printf("%d is Not Found...",no);


	}
}
void update()
{
	int no,i,d;
	if(top==-1)
	{
		printf("Stack is Empty..");
	}
	else
	{
		printf("Enter data you want to search: ");
		scanf("%d",&no);

		for(i=top; i>=-1 && stack[i]!=no; i--)
		{
		      ;
		}
		if(i!=-1)
		{
			printf("Enter the new data: ");
			scanf("%d",&d);

			if(stack[i]==no)
			{

				stack[i]=d;
				printf("Data updated...");
				return;
			}
			printf("%d is Not Found",no);
			return;
		}

		printf("%d is Not Found",no);


	}
}

q3---------------------------

#include<stdio.h>
#include<conio.h>

#define max 5

int top1=-1,top2=max;
int arr[max];

void push_first()
{
	int data;
	if(top1<top2-1)
	{
		top1++;
		printf("Enter data: ");
		scanf("%d",&data);
		arr[top1]=data;

	}
	else
	{
		printf("Stack is full");
	}
}
void push_last()
{
	int data;
	if(top1 < top2 -1)
	{
		top2--;
		printf("Enter data: ");
		scanf("%d",&data);
		arr[top2]=data;

	}
	else
	{
		printf("Stack is full");
	}
}
void pop_first()
{
	if(top1==-1)
	{
		printf("Stack is empty");
	}
	else
	{
		printf("%d is deleted..",arr[top1]);
		arr[top1--];

	}

}
void pop_last()
{
	if(top2==max)
	{
		printf("Stack is empty..");
	}
	else

	{
		printf("%d is deleted..",arr[top2]);
		arr[top2++];
	}
}
void show_first()
{
	int i;
	if(top1==-1)
	{
		printf("Stack is empty");
	}
	else
	{
		for(i=top1;i>=0;i--)
		{
			printf("%d->",arr[i]);
		}
	}
}
void show_last()
{
	int i;
	if(top2==max)
	{
		printf("Stack is empty");
	}
	else
	{
	      for(i=top2;i<max;i++)
	      {
			printf("%d->",arr[i]);
	      }
	}
}
void peep_first()
{
	int no,i;
	if(top1==-1)
	{
		printf("Stack is Empty..");
	}
	else
	{
		printf("Enter data you want to search: ");
		scanf("%d",&no);

		for(i=top1; i>=-1 && arr[i]!=no; i--)
		{
		      ;
		}
		if(i!=-1)
		{
			if(arr[i]==no)
			{
				printf("%d is Found at[%d] index",no,i);
				return;
			}
			printf("%d is Not Found...",no);
			return;
		}

		printf("%d is Not Found...",no);
	}
}
void peep_last()
{
	int no,i;
	if(top2==max)
	{
		printf("Stack is Empty..");
	}
	else
	{
		printf("Enter data you want to search: ");
		scanf("%d",&no);

		for(i=top2; i>=-1 && arr[i]!=no; i--)
		{
		      ;
		}
		if(i!=-1)
		{
			if(arr[i]==no)
			{
				printf("%d is Found at[%d] index",no,i);
				return;
			}
			printf("%d is Not Found...",no);
			return;
		}

		printf("%d is Not Found...",no);
	}
}
void update_first()
{
	int no,i,d;
	if(top1==-1)
	{
		printf("Stack is Empty..");
	}
	else
	{
		printf("Enter data you want to search: ");
		scanf("%d",&no);

		for(i=top1; i>=-1 && arr[i]!=no; i--)
		{
		      ;
		}
		if(i!=-1)
		{
			if(arr[i]==no)
			{
				printf("Enter the new data: ");
				scanf("%d",&d);
				arr[top1] =d;
				printf("Data updated successfully at[%d]",i);
				return;
			}
			printf("%d is Not Found...",no);
			return;
		}

		printf("%d is Not Found...",no);
	}
}
void update_last()
{
	int no,i,d;
	if(top2==max)
	{
		printf("Stack is Empty..");
	}
	else
	{
		printf("Enter data you want to search: ");
		scanf("%d",&no);

		for(i=top2; i>=-1 && arr[i]!=no; i--)
		{
		      ;
		}
		if(i!=-1)
		{
			if(arr[i]==no)
			{
				printf("Enter the new data: ");
				scanf("%d",&d);
				arr[top2] =d;
				printf("Data updated successfully at[%d]",i);
				return;
			}
			printf("%d is Not Found...",no);
			return;
		}

		printf("%d is Not Found...",no);
	}
}


void main()
{
    int choice;

    do
    {
	clrscr();

	printf("\n1: Push first \n2: Push last \n3: Pop first  \n4: Pop last \n5: Show first \n6: Show last \n7: Update first \n8: Update last \n9: Peep_first \n10: Peep_last \n0: End");

	printf("\n\nEnter your choice: ");
	scanf("%d", &choice);

	switch (choice)
	{
		case 1:
		    push_first();
		    getch();
		    break;

		case 2:
		    push_last();
		    getch();
		    break;

		case 3:
		    pop_first();
		    getch();
		    break;

		case 4:
		    pop_last();
		    getch();
		    break;

		case 5:
		    show_first();
		    getch();
		    break;

		case 6:
		    show_last();
		    getch();
		    break;

		case 7:
		    update_first();
		    getch();
		    break;

		case 8:
		    update_last();
		    getch();
		    break;

		case 9:
		    peep_first();
		    getch();
		    break;

		    case 10:peep_last();
			getch();
			break;

		case 0:
		    exit(0);
		    break;

	default:
	    printf("\nplease Enter valid choice..");
	}
    } while(1);
}

q4------------


#include<stdio.h>
#include<conio.h>

#include<ctype.h>

char stack[10];
int top=-1;

void push(char x)
{
	stack[++top]=x;
}

char pop()
{
	if(top==-1)
	{
		return -1;
	}
	else
	{
		return stack[top--];
	}
}

int priority(char x)
{
	if(x=='+' || x=='-')
	{
		return 1;
	}
	if(x=='*' || x=='/')
	{
		return 2;
	}
}

void main()
{
	char exp[20];
	char *e,x;
	clrscr();
	printf("Enter the Expression: ");
	scanf("%s",exp);
	e=exp;

	while(*e!= '\0')
	{
		if(isalnum(*e))
		{
			printf("%c",*e);
		}

		else 
		{
			while(priority(stack[top]) >= priority(*e))
			{
				printf("%c",pop());
			}
			push(*e);
		}
		e++;
	}
	
	while(top != -1)
	{
		printf("%c",pop());
	}
	getch();
}

q5-------------


#include<stdio.h>
#include<conio.h>
#include<ctype.h>

char stack[100];
int top = -1;

void push(char x)
{
    stack[++top] = x;
}

char pop()
{
    if(top == -1)
	return -1;
    else
	return stack[top--];
}

int priority(char x)
{
    if(x == '(')
	return 0;
    if(x == '+' || x == '-')
	return 1;
    if(x == '*' || x == '/')
	return 2;
    return 0;
}

void main()
{
    char exp[100];
    char *e, x;
    printf("Enter the expression : ");
    scanf("%s",exp);
    printf("\n");
    e = exp;

    while(*e != '\0')
    {
	if(isalnum(*e))
	    printf("%c ",*e);
	else if(*e == '(')
	    push(*e);
	else if(*e == ')')
	{
	    while((x = pop()) != '(')
		printf("%c ", x);
	}
	else
	{
	    while(priority(stack[top]) >= priority(*e))
		printf("%c ",pop());
	    push(*e);
	}
	e++;
    }

    while(top != -1)
    {
	printf("%c ",pop());
    }
    getch();
}

q6.-----------------


#include<stdio.h>
#include<conio.h>

#define size 3

int front=-1,rear=-1;
int q[size];

void push()
{
	int d;
	if(rear==size-1)
	{
		printf("\nQueue is full..");
	}
	else if(front==-1 && rear==-1)
	{
		front=0;
		rear=0;
		printf("Enter data: ");
		scanf("%d",&d);
		q[rear]=d;

	}
	else
	{
		rear=rear+1;
		printf("Enter data: ");
		scanf("%d",&d);
		q[rear]=d;


	}


}

void pop()
{
	if(front==-1 && rear==-1)
	{
		printf("\nQueue is Empty");
	}
	else if(front==rear)
	{
		printf("\n%d is deleted successfully...",q[front]);
		front=-1;
		rear=-1;
	}
	else
	{
		printf("\n%d is deleted successfully...",q[front]);
		front++;

	}

}

void display()
{
	int i;
	if(front==-1 && rear==-1)
	{
		printf("\nQueue is Empty..");
	}
	else
	{
		for(i=front;i<=rear;i++)
		{
			printf("%d->",q[i]);
		}
	}
}

void modify()
{
	int d,i,no;
	if(front==-1 && rear==-1)
	{
		printf("\nQueue is Empty..");
	}
	else
	{
		printf("\nEnter data to Modify: ");
		scanf("%d",&no);

		for(i=front;i<=rear && q[i]!=no;i++)
		{
			;
		}
		if(i<=rear)
		{
			printf("\nEnter new data: ");
			scanf("%d",&d);

			if(q[i]==no)
			{
				q[i]=d;
				printf("\nData is Updated at[%d] index...",i);
				return;
			}
			printf("\nData is Updated at[%d]..",i);
			return;
		}
		printf("Data is not Found..");
	}
}

void main()
{
	int choice;

	do
	{
		
		printf("\n1.Push  \n2.POP \n3.Display  \n4.Modify  \n0.End");
	
		printf("\n\nEnter your choice as per above List: ");
		scanf("%d", &choice);

		  switch(choice)
		  {
			case 1:push();
				getch();
				break;

			case 2:pop();
				getch();
				break;

			case 3:display();
				getch();
				break;

			case 4:modify();
				getch();
				break;

			case 0:exit(0);
				break;
		  }

	}while(1);
}

q7.-------------

#include <stdio.h>
#include<conio.h>
#define size 5  
int deque[size];    
int f = -1, r = -1;    

void insert_front()
{
    int x;
    if((f==0 && r==size-1) || (f==r+1))
    {
	    printf("Queue is full");
    }
    else
    {
        printf("Enter data: ");
        scanf("%d",&x);

        if((f==-1) && (r==-1))
        {
	    	f=0;
	    	r=0;
            deque[f]=x;
        }
		else if(f==0)    
		{    
			f=size-1;    
			deque[f]=x;    
		}    

		else
		{
			f=f-1;
			deque[f]=x;
		}
    }

	
}


void insert_rear()
{
    int x;
    if((f==0 && r==size-1) || (f==r+1))
    {
	    printf("Queue is full");
    }
    else
    {
		printf("Enter data: ");
		scanf("%d",&x);

		if((f==-1) && (r==-1))
		{
			r=0;
			deque[r]=x;
		}
		else if(r==size-1)    
		{    
			r=0;    
			deque[r]=x;    
		}    

		else
		{
			r++;
			deque[r]=x;
		}
    }

}


void display()
{
    if(f==-1 && r==-1)
    {
		printf("Deque is empty");
    }
    else
    {
		int i=f;
		printf("\nElements in a deque are: ");

		while(i!=r)
		{
			printf("%d-> ",deque[i]);
			i=(i+1)%size;
		}
       printf("%d->",deque[r]);
     }
}




void delete_front()
{
    if(f==-1 && r==-1)
    {
	printf("Deque is empty");
    }
    else if(f==r)
    {
	printf("\nThe deleted element is %d", deque[f]);
	f=-1;
	r=-1;

    }
     else if(f==(size-1))
     {
	 printf("\nThe deleted element is %d", deque[f]);
	 f=0;
     }
     else
     {
	  printf("\nThe deleted element is %d", deque[f]);
	  f=f+1;
     }
}

void delete_rear()
{
    if((f==-1) && (r==-1))
    {
	printf("Deque is empty");
    }
    else if(f==r)
    {
	printf("\nThe deleted element is %d", deque[r]);
	f=-1;
	r=-1;

    }
     else if(r==0)
     {
	 printf("\nThe deleted element is %d", deque[r]);
	 r=size-1;
     }
     else
     {
	  printf("\nThe deleted element is %d", deque[r]);
	  r=r-1;
     }
}

void main()
{

        int choice;

    do
    {
	
	printf("\n1.Innsert_front \n2.Innsert_rear \n3.delete_front  \n4.delete_rear \n5.display \n0.End");
	
	printf("\n\nEnter your choice as per above List: ");
	scanf("%d", &choice);

	switch (choice)
	{
		case 1:
		    insert_front();
		    getch();
		    break;

		case 2:
		    insert_rear(20);
		    getch();
		    break;

		case 3:
		    delete_front();
		    getch();
		    break;

		case 4:
		    delete_rear();
		    getch();
		    break;

		case 5:
		    display();
		    getch();
		    break;

		case 0:
		    exit(0);
		    break;

	default:
	    printf("\nplease Enter valid choice..");
	}
    } while(1);
   
}